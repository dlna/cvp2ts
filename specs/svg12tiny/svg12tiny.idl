
//
// [GA] The IDL extracted from the source specification has been manually edited as follows:
//
// (1) move DOMException constants into interface definition scope;
// (2) move SVGException constants into interface definition scope;
// (3) remove raises(...) declarations;
// (4) remove module qualifiers (dom::, smil::)
// (5) remove 'in' direction parameter qualifier;
// (6) re-express multiple inheritance using 'implements';
// (7) add implements for AbstractView, DocumentView, SVGGlobal, expressed in spec prose but not IDL;
// (8) add 'callback' qualifier to AsyncStatusCallback and EventListener interface definitions;
// (9) remove EventListenerInitializer2, not required to be supported by ECMAScript;
// (10) reindent
// (11) collapsed continuation lines;
// (12) remove blank lines;
// (13) remove duplicate IDL extracted from Appendix B;
//
// Last Edited: Tue Jun 10 18:00:28 UTC 2014
//

exception DOMException
{
  unsigned short code;
  // ExceptionCode
  const unsigned short      INDEX_SIZE_ERR                 = 1;
  const unsigned short      DOMSTRING_SIZE_ERR             = 2;
  const unsigned short      HIERARCHY_REQUEST_ERR          = 3;
  const unsigned short      WRONG_DOCUMENT_ERR             = 4;
  const unsigned short      INVALID_CHARACTER_ERR          = 5;
  const unsigned short      NO_DATA_ALLOWED_ERR            = 6;
  const unsigned short      NO_MODIFICATION_ALLOWED_ERR    = 7;
  const unsigned short      NOT_FOUND_ERR                  = 8;
  const unsigned short      NOT_SUPPORTED_ERR              = 9;
  const unsigned short      INUSE_ATTRIBUTE_ERR            = 10;
  const unsigned short      INVALID_STATE_ERR              = 11;
  const unsigned short      SYNTAX_ERR                     = 12;
  const unsigned short      INVALID_MODIFICATION_ERR       = 13;
  const unsigned short      NAMESPACE_ERR                  = 14;
  const unsigned short      INVALID_ACCESS_ERR             = 15;
  const unsigned short      VALIDATION_ERR                 = 16;
  const unsigned short      TYPE_MISMATCH_ERR              = 17;
};

interface Node
{
  readonly attribute DOMString namespaceURI;
  readonly attribute DOMString localName;
  readonly attribute Node parentNode;
  readonly attribute Document ownerDocument;
  attribute DOMString textContent;
  Node appendChild(Node newChild);
  Node insertBefore(Node newChild, Node refChild);
  Node removeChild(Node oldChild);
  Node cloneNode(boolean deep);
};

interface Element : Node
{
  DOMString getAttributeNS(DOMString namespaceURI, DOMString localName);
  void setAttributeNS(DOMString namespaceURI, DOMString qualifiedName, DOMString value);
  DOMString getAttribute(DOMString name);
  void setAttribute(DOMString name, DOMString value);
};
Element implements ElementTraversal;

interface Document : Node
{
  Element createElementNS(DOMString namespaceURI, DOMString qualifiedName);
  readonly attribute Element documentElement;
  Element getElementById(DOMString elementId);
};
Document implements DocumentView;

interface ElementTraversal
{
  readonly attribute Element firstElementChild;
  readonly attribute Element lastElementChild;
  readonly attribute Element nextElementSibling;
  readonly attribute Element previousElementSibling;
  readonly attribute unsigned long childElementCount;
};

interface Location
{
  void assign(DOMString iri);
  void reload();
};

interface Window
{
  readonly attribute Window parent;
  readonly attribute Location location;
};
Window implements AbstractView;

interface AbstractView
{
  readonly attribute DocumentView document;
};

interface DocumentView
{
  readonly attribute AbstractView defaultView;
};

interface EventTarget
{
  void addEventListener(DOMString type, EventListener listener, boolean useCapture);
  void removeEventListener(DOMString type, EventListener listener, boolean useCapture);
};

callback interface EventListener
{
  void handleEvent(Event evt);
};

interface Event
{
  readonly attribute EventTarget target;
  readonly attribute EventTarget currentTarget;
  readonly attribute DOMString type;
  readonly attribute boolean cancelable;
  readonly attribute boolean defaultPrevented;
  void stopPropagation();
  void preventDefault();
};

interface MouseEvent : UIEvent
{
  readonly attribute long screenX;
  readonly attribute long screenY;
  readonly attribute long clientX;
  readonly attribute long clientY;
  readonly attribute unsigned short button;
};

interface MouseWheelEvent : MouseEvent
{
  readonly attribute long wheelDelta;
};

interface TextEvent : UIEvent
{
  readonly attribute DOMString data;
};

interface KeyboardEvent : UIEvent
{
  readonly attribute DOMString keyIdentifier;
};

interface UIEvent : Event
{
  readonly attribute long detail;
};

interface ProgressEvent : Event
{
  readonly attribute boolean lengthComputable;
  readonly attribute unsigned long loaded;
  readonly attribute unsigned long total;
};

interface ElementTimeControl
{
  void beginElementAt(float offset);
  void beginElement();
  void endElementAt(float offset);
  void endElement();
};

interface TimeEvent : Event
{
  readonly attribute long detail;
};

exception SVGException
{
  unsigned short code;
  // ExceptionCode
  const unsigned short SVG_WRONG_TYPE_ERR         = 0;
  const unsigned short SVG_INVALID_VALUE_ERR      = 1;
  const unsigned short SVG_MATRIX_NOT_INVERTABLE  = 2;
};

interface SVGDocument : Document
{
};
SVGDocument implements EventTarget;

interface SVGUseElement : SVGLocatableElement
{
};

interface SVGElementInstance : EventTarget
{
  readonly attribute SVGElement correspondingElement;
  readonly attribute SVGUseElement correspondingUseElement;
};

interface SVGSVGElement : SVGLocatableElement
{
  const unsigned short NAV_AUTO           = 1;
  const unsigned short NAV_NEXT           = 2;
  const unsigned short NAV_PREV           = 3;
  const unsigned short NAV_UP             = 4;
  const unsigned short NAV_UP_RIGHT       = 5;
  const unsigned short NAV_RIGHT          = 6;
  const unsigned short NAV_DOWN_RIGHT     = 7;
  const unsigned short NAV_DOWN           = 8;
  const unsigned short NAV_DOWN_LEFT      = 9;
  const unsigned short NAV_LEFT           = 10;
  const unsigned short NAV_UP_LEFT        = 11;
  attribute float currentScale;
  attribute float currentRotate;
  readonly attribute SVGPoint currentTranslate;
  readonly attribute SVGRect viewport;
  float getCurrentTime();
  void setCurrentTime(float seconds);
  SVGMatrix createSVGMatrixComponents(float a, float b, float c, float d, float e, float f);
  SVGRect createSVGRect();
  SVGPoint createSVGPoint();
  SVGPath createSVGPath();
  SVGRGBColor createSVGRGBColor(float red, float green, float blue);
  void moveFocus(unsigned short motionType);
  void setFocus(EventTarget theObject);
  EventTarget getCurrentFocusedObject();
};
SVGSVGElement implements SVGTimedElement;

interface SVGRGBColor
{
  attribute unsigned long red;
  attribute unsigned long green;
  attribute unsigned long blue;
};

interface SVGRect
{
  attribute float x;
  attribute float y;
  attribute float width;
  attribute float height;
};

interface SVGPoint
{
  attribute float x;
  attribute float y;
  SVGPoint matrixTransform(SVGMatrix matrix);
};

interface SVGPath
{
  const unsigned short MOVE_TO = 77;
  const unsigned short LINE_TO = 76;
  const unsigned short CURVE_TO = 67;
  const unsigned short QUAD_TO = 81;
  const unsigned short CLOSE = 90;
  readonly attribute unsigned long numberOfSegments;
  unsigned short getSegment(unsigned long cmdIndex);
  float getSegmentParam(unsigned long cmdIndex, unsigned long paramIndex);
  void moveTo(float x, float y);
  void lineTo(float x, float y);
  void quadTo(float x1, float y1, float x2, float y2);
  void curveTo(float x1, float y1, float x2, float y2, float x3, float y3);
  void close();
};

interface SVGMatrix
{
  float getComponent(unsigned long index);
  SVGMatrix mMultiply(SVGMatrix secondMatrix);
  SVGMatrix inverse();
  SVGMatrix mTranslate(float x, float y);
  SVGMatrix mScale(float scaleFactor);
  SVGMatrix mRotate(float angle);
};

interface SVGLocatable
{
  SVGRect   getBBox();
  SVGMatrix getScreenCTM();
  SVGRect   getScreenBBox();
};

interface SVGLocatableElement : SVGElement
{
};
SVGLocatableElement implements SVGLocatable;

interface TraitAccess
{
  DOMString getTrait(DOMString name);
  DOMString getTraitNS(DOMString namespaceURI, DOMString name);
  float getFloatTrait(DOMString name);
  sequence<float> getFloatListTrait(DOMString name);
  SVGMatrix getMatrixTrait(DOMString name);
  SVGRect getRectTrait(DOMString name);
  SVGPath getPathTrait(DOMString name);
  SVGRGBColor getRGBColorTrait(DOMString name);
  DOMString getPresentationTrait(DOMString name);
  DOMString getPresentationTraitNS(DOMString namespaceURI, DOMString name);
  float getFloatPresentationTrait(DOMString name);
  sequence<float> getFloatListPresentationTrait(DOMString name);
  SVGMatrix getMatrixPresentationTrait(DOMString name);
  SVGRect getRectPresentationTrait(DOMString name);
  SVGPath getPathPresentationTrait(DOMString name);
  SVGRGBColor getRGBColorPresentationTrait(DOMString name);
  void setTrait(DOMString name, DOMString value);
  void setTraitNS(DOMString namespaceURI, DOMString name, DOMString value);
  void setFloatTrait(DOMString name, float value);
  void setFloatListTrait(DOMString name, sequence<float> value);
  void setMatrixTrait(DOMString name, SVGMatrix matrix);
  void setRectTrait(DOMString name, SVGRect rect);
  void setPathTrait(DOMString name, SVGPath path);
  void setRGBColorTrait(DOMString name, SVGRGBColor color);
};

interface SVGElement : Element
{
  attribute DOMString id;
};
SVGElement implements EventTarget;
SVGElement implements TraitAccess;

interface SVGTimedElement : SVGElement
{
  void pauseElement();
  void resumeElement();
  readonly attribute boolean isPaused;
};
SVGTimedElement implements ElementTimeControl;

interface SVGAnimationElement : SVGTimedElement
{
};

interface SVGVisualMediaElement : SVGLocatableElement
{
};
SVGVisualMediaElement implements SVGTimedElement;

interface SVGTimer : EventTarget
{
  attribute long delay;
  attribute long repeatInterval;
  readonly attribute boolean running;
  void start();
  void stop();
};

interface SVGGlobal
{
  SVGTimer createTimer(long initialInterval, long repeatInterval);
  void getURL(DOMString iri, AsyncStatusCallback callback);
  void postURL(DOMString iri, DOMString data, AsyncStatusCallback callback, DOMString type, DOMString encoding);
  Node parseXML(DOMString data, Document contextDoc);
};
Window implements SVGGlobal;

callback interface AsyncStatusCallback
{
  void operationComplete(AsyncURLStatus status);
};

interface AsyncURLStatus
{
  readonly attribute boolean success;
  readonly attribute DOMString contentType;
  readonly attribute DOMString content;
};
